// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "classting/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NewsRepository is an autogenerated mock type for the NewsRepository type
type NewsRepository struct {
	mock.Mock
}

type NewsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NewsRepository) EXPECT() *NewsRepository_Expecter {
	return &NewsRepository_Expecter{mock: &_m.Mock}
}

// CreateNews provides a mock function with given fields: ctx, news
func (_m *NewsRepository) CreateNews(ctx context.Context, news domain.News) (int, error) {
	ret := _m.Called(ctx, news)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.News) (int, error)); ok {
		return rf(ctx, news)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.News) int); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.News) error); ok {
		r1 = rf(ctx, news)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewsRepository_CreateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNews'
type NewsRepository_CreateNews_Call struct {
	*mock.Call
}

// CreateNews is a helper method to define mock.On call
//   - ctx context.Context
//   - news domain.News
func (_e *NewsRepository_Expecter) CreateNews(ctx interface{}, news interface{}) *NewsRepository_CreateNews_Call {
	return &NewsRepository_CreateNews_Call{Call: _e.mock.On("CreateNews", ctx, news)}
}

func (_c *NewsRepository_CreateNews_Call) Run(run func(ctx context.Context, news domain.News)) *NewsRepository_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.News))
	})
	return _c
}

func (_c *NewsRepository_CreateNews_Call) Return(_a0 int, _a1 error) *NewsRepository_CreateNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NewsRepository_CreateNews_Call) RunAndReturn(run func(context.Context, domain.News) (int, error)) *NewsRepository_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNews provides a mock function with given fields: ctx, newsID
func (_m *NewsRepository) DeleteNews(ctx context.Context, newsID int) error {
	ret := _m.Called(ctx, newsID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, newsID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewsRepository_DeleteNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNews'
type NewsRepository_DeleteNews_Call struct {
	*mock.Call
}

// DeleteNews is a helper method to define mock.On call
//   - ctx context.Context
//   - newsID int
func (_e *NewsRepository_Expecter) DeleteNews(ctx interface{}, newsID interface{}) *NewsRepository_DeleteNews_Call {
	return &NewsRepository_DeleteNews_Call{Call: _e.mock.On("DeleteNews", ctx, newsID)}
}

func (_c *NewsRepository_DeleteNews_Call) Run(run func(ctx context.Context, newsID int)) *NewsRepository_DeleteNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *NewsRepository_DeleteNews_Call) Return(_a0 error) *NewsRepository_DeleteNews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewsRepository_DeleteNews_Call) RunAndReturn(run func(context.Context, int) error) *NewsRepository_DeleteNews_Call {
	_c.Call.Return(run)
	return _c
}

// FindNewsByID provides a mock function with given fields: ctx, newsID
func (_m *NewsRepository) FindNewsByID(ctx context.Context, newsID int) (*domain.News, error) {
	ret := _m.Called(ctx, newsID)

	var r0 *domain.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.News, error)); ok {
		return rf(ctx, newsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.News); ok {
		r0 = rf(ctx, newsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, newsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewsRepository_FindNewsByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindNewsByID'
type NewsRepository_FindNewsByID_Call struct {
	*mock.Call
}

// FindNewsByID is a helper method to define mock.On call
//   - ctx context.Context
//   - newsID int
func (_e *NewsRepository_Expecter) FindNewsByID(ctx interface{}, newsID interface{}) *NewsRepository_FindNewsByID_Call {
	return &NewsRepository_FindNewsByID_Call{Call: _e.mock.On("FindNewsByID", ctx, newsID)}
}

func (_c *NewsRepository_FindNewsByID_Call) Run(run func(ctx context.Context, newsID int)) *NewsRepository_FindNewsByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *NewsRepository_FindNewsByID_Call) Return(_a0 *domain.News, _a1 error) *NewsRepository_FindNewsByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NewsRepository_FindNewsByID_Call) RunAndReturn(run func(context.Context, int) (*domain.News, error)) *NewsRepository_FindNewsByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListNews provides a mock function with given fields: ctx, params
func (_m *NewsRepository) ListNews(ctx context.Context, params domain.ListNewsParams) ([]domain.News, error) {
	ret := _m.Called(ctx, params)

	var r0 []domain.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListNewsParams) ([]domain.News, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListNewsParams) []domain.News); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListNewsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewsRepository_ListNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNews'
type NewsRepository_ListNews_Call struct {
	*mock.Call
}

// ListNews is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.ListNewsParams
func (_e *NewsRepository_Expecter) ListNews(ctx interface{}, params interface{}) *NewsRepository_ListNews_Call {
	return &NewsRepository_ListNews_Call{Call: _e.mock.On("ListNews", ctx, params)}
}

func (_c *NewsRepository_ListNews_Call) Run(run func(ctx context.Context, params domain.ListNewsParams)) *NewsRepository_ListNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListNewsParams))
	})
	return _c
}

func (_c *NewsRepository_ListNews_Call) Return(_a0 []domain.News, _a1 error) *NewsRepository_ListNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NewsRepository_ListNews_Call) RunAndReturn(run func(context.Context, domain.ListNewsParams) ([]domain.News, error)) *NewsRepository_ListNews_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNews provides a mock function with given fields: ctx, news
func (_m *NewsRepository) UpdateNews(ctx context.Context, news domain.News) error {
	ret := _m.Called(ctx, news)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.News) error); ok {
		r0 = rf(ctx, news)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewsRepository_UpdateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNews'
type NewsRepository_UpdateNews_Call struct {
	*mock.Call
}

// UpdateNews is a helper method to define mock.On call
//   - ctx context.Context
//   - news domain.News
func (_e *NewsRepository_Expecter) UpdateNews(ctx interface{}, news interface{}) *NewsRepository_UpdateNews_Call {
	return &NewsRepository_UpdateNews_Call{Call: _e.mock.On("UpdateNews", ctx, news)}
}

func (_c *NewsRepository_UpdateNews_Call) Run(run func(ctx context.Context, news domain.News)) *NewsRepository_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.News))
	})
	return _c
}

func (_c *NewsRepository_UpdateNews_Call) Return(_a0 error) *NewsRepository_UpdateNews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewsRepository_UpdateNews_Call) RunAndReturn(run func(context.Context, domain.News) error) *NewsRepository_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}

// NewNewsRepository creates a new instance of NewsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsRepository {
	mock := &NewsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
