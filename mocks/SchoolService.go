// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "classting/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SchoolService is an autogenerated mock type for the SchoolService type
type SchoolService struct {
	mock.Mock
}

type SchoolService_Expecter struct {
	mock *mock.Mock
}

func (_m *SchoolService) EXPECT() *SchoolService_Expecter {
	return &SchoolService_Expecter{mock: &_m.Mock}
}

// CreateSchool provides a mock function with given fields: ctx, req
func (_m *SchoolService) CreateSchool(ctx context.Context, req domain.CreateSchoolRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateSchoolRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchoolService_CreateSchool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchool'
type SchoolService_CreateSchool_Call struct {
	*mock.Call
}

// CreateSchool is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.CreateSchoolRequest
func (_e *SchoolService_Expecter) CreateSchool(ctx interface{}, req interface{}) *SchoolService_CreateSchool_Call {
	return &SchoolService_CreateSchool_Call{Call: _e.mock.On("CreateSchool", ctx, req)}
}

func (_c *SchoolService_CreateSchool_Call) Run(run func(ctx context.Context, req domain.CreateSchoolRequest)) *SchoolService_CreateSchool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateSchoolRequest))
	})
	return _c
}

func (_c *SchoolService_CreateSchool_Call) Return(_a0 error) *SchoolService_CreateSchool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchoolService_CreateSchool_Call) RunAndReturn(run func(context.Context, domain.CreateSchoolRequest) error) *SchoolService_CreateSchool_Call {
	_c.Call.Return(run)
	return _c
}

// ListSchools provides a mock function with given fields: ctx, req
func (_m *SchoolService) ListSchools(ctx context.Context, req domain.ListSchoolsRequest) (domain.ListSchoolsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 domain.ListSchoolsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSchoolsRequest) (domain.ListSchoolsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSchoolsRequest) domain.ListSchoolsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.ListSchoolsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListSchoolsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchoolService_ListSchools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSchools'
type SchoolService_ListSchools_Call struct {
	*mock.Call
}

// ListSchools is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.ListSchoolsRequest
func (_e *SchoolService_Expecter) ListSchools(ctx interface{}, req interface{}) *SchoolService_ListSchools_Call {
	return &SchoolService_ListSchools_Call{Call: _e.mock.On("ListSchools", ctx, req)}
}

func (_c *SchoolService_ListSchools_Call) Run(run func(ctx context.Context, req domain.ListSchoolsRequest)) *SchoolService_ListSchools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListSchoolsRequest))
	})
	return _c
}

func (_c *SchoolService_ListSchools_Call) Return(_a0 domain.ListSchoolsResponse, _a1 error) *SchoolService_ListSchools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchoolService_ListSchools_Call) RunAndReturn(run func(context.Context, domain.ListSchoolsRequest) (domain.ListSchoolsResponse, error)) *SchoolService_ListSchools_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchoolService creates a new instance of SchoolService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchoolService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchoolService {
	mock := &SchoolService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
