// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionController is an autogenerated mock type for the SubscriptionController type
type SubscriptionController struct {
	mock.Mock
}

type SubscriptionController_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionController) EXPECT() *SubscriptionController_Expecter {
	return &SubscriptionController_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: c
func (_m *SubscriptionController) CreateSubscription(c *gin.Context) {
	_m.Called(c)
}

// SubscriptionController_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type SubscriptionController_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - c *gin.Context
func (_e *SubscriptionController_Expecter) CreateSubscription(c interface{}) *SubscriptionController_CreateSubscription_Call {
	return &SubscriptionController_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", c)}
}

func (_c *SubscriptionController_CreateSubscription_Call) Run(run func(c *gin.Context)) *SubscriptionController_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *SubscriptionController_CreateSubscription_Call) Return() *SubscriptionController_CreateSubscription_Call {
	_c.Call.Return()
	return _c
}

func (_c *SubscriptionController_CreateSubscription_Call) RunAndReturn(run func(*gin.Context)) *SubscriptionController_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: c
func (_m *SubscriptionController) DeleteSubscription(c *gin.Context) {
	_m.Called(c)
}

// SubscriptionController_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriptionController_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - c *gin.Context
func (_e *SubscriptionController_Expecter) DeleteSubscription(c interface{}) *SubscriptionController_DeleteSubscription_Call {
	return &SubscriptionController_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", c)}
}

func (_c *SubscriptionController_DeleteSubscription_Call) Run(run func(c *gin.Context)) *SubscriptionController_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *SubscriptionController_DeleteSubscription_Call) Return() *SubscriptionController_DeleteSubscription_Call {
	_c.Call.Return()
	return _c
}

func (_c *SubscriptionController_DeleteSubscription_Call) RunAndReturn(run func(*gin.Context)) *SubscriptionController_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptionSchools provides a mock function with given fields: c
func (_m *SubscriptionController) ListSubscriptionSchools(c *gin.Context) {
	_m.Called(c)
}

// SubscriptionController_ListSubscriptionSchools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionSchools'
type SubscriptionController_ListSubscriptionSchools_Call struct {
	*mock.Call
}

// ListSubscriptionSchools is a helper method to define mock.On call
//   - c *gin.Context
func (_e *SubscriptionController_Expecter) ListSubscriptionSchools(c interface{}) *SubscriptionController_ListSubscriptionSchools_Call {
	return &SubscriptionController_ListSubscriptionSchools_Call{Call: _e.mock.On("ListSubscriptionSchools", c)}
}

func (_c *SubscriptionController_ListSubscriptionSchools_Call) Run(run func(c *gin.Context)) *SubscriptionController_ListSubscriptionSchools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *SubscriptionController_ListSubscriptionSchools_Call) Return() *SubscriptionController_ListSubscriptionSchools_Call {
	_c.Call.Return()
	return _c
}

func (_c *SubscriptionController_ListSubscriptionSchools_Call) RunAndReturn(run func(*gin.Context)) *SubscriptionController_ListSubscriptionSchools_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriptionController creates a new instance of SubscriptionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionController(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionController {
	mock := &SubscriptionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
