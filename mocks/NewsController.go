// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewsController is an autogenerated mock type for the NewsController type
type NewsController struct {
	mock.Mock
}

type NewsController_Expecter struct {
	mock *mock.Mock
}

func (_m *NewsController) EXPECT() *NewsController_Expecter {
	return &NewsController_Expecter{mock: &_m.Mock}
}

// CreateNews provides a mock function with given fields: c
func (_m *NewsController) CreateNews(c *gin.Context) {
	_m.Called(c)
}

// NewsController_CreateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNews'
type NewsController_CreateNews_Call struct {
	*mock.Call
}

// CreateNews is a helper method to define mock.On call
//   - c *gin.Context
func (_e *NewsController_Expecter) CreateNews(c interface{}) *NewsController_CreateNews_Call {
	return &NewsController_CreateNews_Call{Call: _e.mock.On("CreateNews", c)}
}

func (_c *NewsController_CreateNews_Call) Run(run func(c *gin.Context)) *NewsController_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *NewsController_CreateNews_Call) Return() *NewsController_CreateNews_Call {
	_c.Call.Return()
	return _c
}

func (_c *NewsController_CreateNews_Call) RunAndReturn(run func(*gin.Context)) *NewsController_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNews provides a mock function with given fields: c
func (_m *NewsController) DeleteNews(c *gin.Context) {
	_m.Called(c)
}

// NewsController_DeleteNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNews'
type NewsController_DeleteNews_Call struct {
	*mock.Call
}

// DeleteNews is a helper method to define mock.On call
//   - c *gin.Context
func (_e *NewsController_Expecter) DeleteNews(c interface{}) *NewsController_DeleteNews_Call {
	return &NewsController_DeleteNews_Call{Call: _e.mock.On("DeleteNews", c)}
}

func (_c *NewsController_DeleteNews_Call) Run(run func(c *gin.Context)) *NewsController_DeleteNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *NewsController_DeleteNews_Call) Return() *NewsController_DeleteNews_Call {
	_c.Call.Return()
	return _c
}

func (_c *NewsController_DeleteNews_Call) RunAndReturn(run func(*gin.Context)) *NewsController_DeleteNews_Call {
	_c.Call.Return(run)
	return _c
}

// ListNews provides a mock function with given fields: c
func (_m *NewsController) ListNews(c *gin.Context) {
	_m.Called(c)
}

// NewsController_ListNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNews'
type NewsController_ListNews_Call struct {
	*mock.Call
}

// ListNews is a helper method to define mock.On call
//   - c *gin.Context
func (_e *NewsController_Expecter) ListNews(c interface{}) *NewsController_ListNews_Call {
	return &NewsController_ListNews_Call{Call: _e.mock.On("ListNews", c)}
}

func (_c *NewsController_ListNews_Call) Run(run func(c *gin.Context)) *NewsController_ListNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *NewsController_ListNews_Call) Return() *NewsController_ListNews_Call {
	_c.Call.Return()
	return _c
}

func (_c *NewsController_ListNews_Call) RunAndReturn(run func(*gin.Context)) *NewsController_ListNews_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNews provides a mock function with given fields: c
func (_m *NewsController) UpdateNews(c *gin.Context) {
	_m.Called(c)
}

// NewsController_UpdateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNews'
type NewsController_UpdateNews_Call struct {
	*mock.Call
}

// UpdateNews is a helper method to define mock.On call
//   - c *gin.Context
func (_e *NewsController_Expecter) UpdateNews(c interface{}) *NewsController_UpdateNews_Call {
	return &NewsController_UpdateNews_Call{Call: _e.mock.On("UpdateNews", c)}
}

func (_c *NewsController_UpdateNews_Call) Run(run func(c *gin.Context)) *NewsController_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *NewsController_UpdateNews_Call) Return() *NewsController_UpdateNews_Call {
	_c.Call.Return()
	return _c
}

func (_c *NewsController_UpdateNews_Call) RunAndReturn(run func(*gin.Context)) *NewsController_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}

// NewNewsController creates a new instance of NewsController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsController(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsController {
	mock := &NewsController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
