// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "classting/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// NewsService is an autogenerated mock type for the NewsService type
type NewsService struct {
	mock.Mock
}

type NewsService_Expecter struct {
	mock *mock.Mock
}

func (_m *NewsService) EXPECT() *NewsService_Expecter {
	return &NewsService_Expecter{mock: &_m.Mock}
}

// CreateNews provides a mock function with given fields: ctx, req
func (_m *NewsService) CreateNews(ctx context.Context, req domain.CreateNewsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateNewsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewsService_CreateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNews'
type NewsService_CreateNews_Call struct {
	*mock.Call
}

// CreateNews is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.CreateNewsRequest
func (_e *NewsService_Expecter) CreateNews(ctx interface{}, req interface{}) *NewsService_CreateNews_Call {
	return &NewsService_CreateNews_Call{Call: _e.mock.On("CreateNews", ctx, req)}
}

func (_c *NewsService_CreateNews_Call) Run(run func(ctx context.Context, req domain.CreateNewsRequest)) *NewsService_CreateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateNewsRequest))
	})
	return _c
}

func (_c *NewsService_CreateNews_Call) Return(_a0 error) *NewsService_CreateNews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewsService_CreateNews_Call) RunAndReturn(run func(context.Context, domain.CreateNewsRequest) error) *NewsService_CreateNews_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNews provides a mock function with given fields: ctx, req
func (_m *NewsService) DeleteNews(ctx context.Context, req domain.DeleteNewsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeleteNewsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewsService_DeleteNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNews'
type NewsService_DeleteNews_Call struct {
	*mock.Call
}

// DeleteNews is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.DeleteNewsRequest
func (_e *NewsService_Expecter) DeleteNews(ctx interface{}, req interface{}) *NewsService_DeleteNews_Call {
	return &NewsService_DeleteNews_Call{Call: _e.mock.On("DeleteNews", ctx, req)}
}

func (_c *NewsService_DeleteNews_Call) Run(run func(ctx context.Context, req domain.DeleteNewsRequest)) *NewsService_DeleteNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.DeleteNewsRequest))
	})
	return _c
}

func (_c *NewsService_DeleteNews_Call) Return(_a0 error) *NewsService_DeleteNews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewsService_DeleteNews_Call) RunAndReturn(run func(context.Context, domain.DeleteNewsRequest) error) *NewsService_DeleteNews_Call {
	_c.Call.Return(run)
	return _c
}

// ListNews provides a mock function with given fields: ctx, req
func (_m *NewsService) ListNews(ctx context.Context, req domain.ListNewsRequest) (domain.ListNewsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 domain.ListNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListNewsRequest) (domain.ListNewsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListNewsRequest) domain.ListNewsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.ListNewsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListNewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewsService_ListNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNews'
type NewsService_ListNews_Call struct {
	*mock.Call
}

// ListNews is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.ListNewsRequest
func (_e *NewsService_Expecter) ListNews(ctx interface{}, req interface{}) *NewsService_ListNews_Call {
	return &NewsService_ListNews_Call{Call: _e.mock.On("ListNews", ctx, req)}
}

func (_c *NewsService_ListNews_Call) Run(run func(ctx context.Context, req domain.ListNewsRequest)) *NewsService_ListNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListNewsRequest))
	})
	return _c
}

func (_c *NewsService_ListNews_Call) Return(_a0 domain.ListNewsResponse, _a1 error) *NewsService_ListNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NewsService_ListNews_Call) RunAndReturn(run func(context.Context, domain.ListNewsRequest) (domain.ListNewsResponse, error)) *NewsService_ListNews_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNews provides a mock function with given fields: ctx, req
func (_m *NewsService) UpdateNews(ctx context.Context, req domain.UpdateNewsRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateNewsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewsService_UpdateNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNews'
type NewsService_UpdateNews_Call struct {
	*mock.Call
}

// UpdateNews is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.UpdateNewsRequest
func (_e *NewsService_Expecter) UpdateNews(ctx interface{}, req interface{}) *NewsService_UpdateNews_Call {
	return &NewsService_UpdateNews_Call{Call: _e.mock.On("UpdateNews", ctx, req)}
}

func (_c *NewsService_UpdateNews_Call) Run(run func(ctx context.Context, req domain.UpdateNewsRequest)) *NewsService_UpdateNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.UpdateNewsRequest))
	})
	return _c
}

func (_c *NewsService_UpdateNews_Call) Return(_a0 error) *NewsService_UpdateNews_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NewsService_UpdateNews_Call) RunAndReturn(run func(context.Context, domain.UpdateNewsRequest) error) *NewsService_UpdateNews_Call {
	_c.Call.Return(run)
	return _c
}

// NewNewsService creates a new instance of NewsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNewsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NewsService {
	mock := &NewsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
