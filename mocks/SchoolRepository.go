// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "classting/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SchoolRepository is an autogenerated mock type for the SchoolRepository type
type SchoolRepository struct {
	mock.Mock
}

type SchoolRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *SchoolRepository) EXPECT() *SchoolRepository_Expecter {
	return &SchoolRepository_Expecter{mock: &_m.Mock}
}

// CreateSchool provides a mock function with given fields: ctx, school
func (_m *SchoolRepository) CreateSchool(ctx context.Context, school domain.School) (int, error) {
	ret := _m.Called(ctx, school)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.School) (int, error)); ok {
		return rf(ctx, school)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.School) int); ok {
		r0 = rf(ctx, school)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.School) error); ok {
		r1 = rf(ctx, school)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchoolRepository_CreateSchool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSchool'
type SchoolRepository_CreateSchool_Call struct {
	*mock.Call
}

// CreateSchool is a helper method to define mock.On call
//   - ctx context.Context
//   - school domain.School
func (_e *SchoolRepository_Expecter) CreateSchool(ctx interface{}, school interface{}) *SchoolRepository_CreateSchool_Call {
	return &SchoolRepository_CreateSchool_Call{Call: _e.mock.On("CreateSchool", ctx, school)}
}

func (_c *SchoolRepository_CreateSchool_Call) Run(run func(ctx context.Context, school domain.School)) *SchoolRepository_CreateSchool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.School))
	})
	return _c
}

func (_c *SchoolRepository_CreateSchool_Call) Return(_a0 int, _a1 error) *SchoolRepository_CreateSchool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchoolRepository_CreateSchool_Call) RunAndReturn(run func(context.Context, domain.School) (int, error)) *SchoolRepository_CreateSchool_Call {
	_c.Call.Return(run)
	return _c
}

// FindSchoolByNameAndRegion provides a mock function with given fields: ctx, params
func (_m *SchoolRepository) FindSchoolByNameAndRegion(ctx context.Context, params domain.FindSchoolByNameAndRegionParams) (*domain.School, error) {
	ret := _m.Called(ctx, params)

	var r0 *domain.School
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FindSchoolByNameAndRegionParams) (*domain.School, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.FindSchoolByNameAndRegionParams) *domain.School); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.School)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.FindSchoolByNameAndRegionParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SchoolRepository_FindSchoolByNameAndRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindSchoolByNameAndRegion'
type SchoolRepository_FindSchoolByNameAndRegion_Call struct {
	*mock.Call
}

// FindSchoolByNameAndRegion is a helper method to define mock.On call
//   - ctx context.Context
//   - params domain.FindSchoolByNameAndRegionParams
func (_e *SchoolRepository_Expecter) FindSchoolByNameAndRegion(ctx interface{}, params interface{}) *SchoolRepository_FindSchoolByNameAndRegion_Call {
	return &SchoolRepository_FindSchoolByNameAndRegion_Call{Call: _e.mock.On("FindSchoolByNameAndRegion", ctx, params)}
}

func (_c *SchoolRepository_FindSchoolByNameAndRegion_Call) Run(run func(ctx context.Context, params domain.FindSchoolByNameAndRegionParams)) *SchoolRepository_FindSchoolByNameAndRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.FindSchoolByNameAndRegionParams))
	})
	return _c
}

func (_c *SchoolRepository_FindSchoolByNameAndRegion_Call) Return(_a0 *domain.School, _a1 error) *SchoolRepository_FindSchoolByNameAndRegion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SchoolRepository_FindSchoolByNameAndRegion_Call) RunAndReturn(run func(context.Context, domain.FindSchoolByNameAndRegionParams) (*domain.School, error)) *SchoolRepository_FindSchoolByNameAndRegion_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchoolRepository creates a new instance of SchoolRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchoolRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchoolRepository {
	mock := &SchoolRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
