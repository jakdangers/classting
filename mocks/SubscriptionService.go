// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	domain "classting/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

type SubscriptionService_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscriptionService) EXPECT() *SubscriptionService_Expecter {
	return &SubscriptionService_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: ctx, req
func (_m *SubscriptionService) CreateSubscription(ctx context.Context, req domain.CreateSubscriptionRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateSubscriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type SubscriptionService_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.CreateSubscriptionRequest
func (_e *SubscriptionService_Expecter) CreateSubscription(ctx interface{}, req interface{}) *SubscriptionService_CreateSubscription_Call {
	return &SubscriptionService_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", ctx, req)}
}

func (_c *SubscriptionService_CreateSubscription_Call) Run(run func(ctx context.Context, req domain.CreateSubscriptionRequest)) *SubscriptionService_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.CreateSubscriptionRequest))
	})
	return _c
}

func (_c *SubscriptionService_CreateSubscription_Call) Return(_a0 error) *SubscriptionService_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriptionService_CreateSubscription_Call) RunAndReturn(run func(context.Context, domain.CreateSubscriptionRequest) error) *SubscriptionService_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: ctx, req
func (_m *SubscriptionService) DeleteSubscription(ctx context.Context, req domain.DeleteSubscriptionRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.DeleteSubscriptionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscriptionService_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type SubscriptionService_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.DeleteSubscriptionRequest
func (_e *SubscriptionService_Expecter) DeleteSubscription(ctx interface{}, req interface{}) *SubscriptionService_DeleteSubscription_Call {
	return &SubscriptionService_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", ctx, req)}
}

func (_c *SubscriptionService_DeleteSubscription_Call) Run(run func(ctx context.Context, req domain.DeleteSubscriptionRequest)) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.DeleteSubscriptionRequest))
	})
	return _c
}

func (_c *SubscriptionService_DeleteSubscription_Call) Return(_a0 error) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SubscriptionService_DeleteSubscription_Call) RunAndReturn(run func(context.Context, domain.DeleteSubscriptionRequest) error) *SubscriptionService_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptionSchoolNews provides a mock function with given fields: ctx, req
func (_m *SubscriptionService) ListSubscriptionSchoolNews(ctx context.Context, req domain.ListSubscriptionSchoolNewsRequest) (domain.ListSubscriptionSchoolNewsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 domain.ListSubscriptionSchoolNewsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSubscriptionSchoolNewsRequest) (domain.ListSubscriptionSchoolNewsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSubscriptionSchoolNewsRequest) domain.ListSubscriptionSchoolNewsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.ListSubscriptionSchoolNewsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListSubscriptionSchoolNewsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionService_ListSubscriptionSchoolNews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionSchoolNews'
type SubscriptionService_ListSubscriptionSchoolNews_Call struct {
	*mock.Call
}

// ListSubscriptionSchoolNews is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.ListSubscriptionSchoolNewsRequest
func (_e *SubscriptionService_Expecter) ListSubscriptionSchoolNews(ctx interface{}, req interface{}) *SubscriptionService_ListSubscriptionSchoolNews_Call {
	return &SubscriptionService_ListSubscriptionSchoolNews_Call{Call: _e.mock.On("ListSubscriptionSchoolNews", ctx, req)}
}

func (_c *SubscriptionService_ListSubscriptionSchoolNews_Call) Run(run func(ctx context.Context, req domain.ListSubscriptionSchoolNewsRequest)) *SubscriptionService_ListSubscriptionSchoolNews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListSubscriptionSchoolNewsRequest))
	})
	return _c
}

func (_c *SubscriptionService_ListSubscriptionSchoolNews_Call) Return(_a0 domain.ListSubscriptionSchoolNewsResponse, _a1 error) *SubscriptionService_ListSubscriptionSchoolNews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriptionService_ListSubscriptionSchoolNews_Call) RunAndReturn(run func(context.Context, domain.ListSubscriptionSchoolNewsRequest) (domain.ListSubscriptionSchoolNewsResponse, error)) *SubscriptionService_ListSubscriptionSchoolNews_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscriptionSchools provides a mock function with given fields: ctx, req
func (_m *SubscriptionService) ListSubscriptionSchools(ctx context.Context, req domain.ListSubscriptionSchoolsRequest) (domain.ListSubscriptionSchoolsResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 domain.ListSubscriptionSchoolsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSubscriptionSchoolsRequest) (domain.ListSubscriptionSchoolsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ListSubscriptionSchoolsRequest) domain.ListSubscriptionSchoolsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(domain.ListSubscriptionSchoolsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ListSubscriptionSchoolsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscriptionService_ListSubscriptionSchools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscriptionSchools'
type SubscriptionService_ListSubscriptionSchools_Call struct {
	*mock.Call
}

// ListSubscriptionSchools is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.ListSubscriptionSchoolsRequest
func (_e *SubscriptionService_Expecter) ListSubscriptionSchools(ctx interface{}, req interface{}) *SubscriptionService_ListSubscriptionSchools_Call {
	return &SubscriptionService_ListSubscriptionSchools_Call{Call: _e.mock.On("ListSubscriptionSchools", ctx, req)}
}

func (_c *SubscriptionService_ListSubscriptionSchools_Call) Run(run func(ctx context.Context, req domain.ListSubscriptionSchoolsRequest)) *SubscriptionService_ListSubscriptionSchools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ListSubscriptionSchoolsRequest))
	})
	return _c
}

func (_c *SubscriptionService_ListSubscriptionSchools_Call) Return(_a0 domain.ListSubscriptionSchoolsResponse, _a1 error) *SubscriptionService_ListSubscriptionSchools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscriptionService_ListSubscriptionSchools_Call) RunAndReturn(run func(context.Context, domain.ListSubscriptionSchoolsRequest) (domain.ListSubscriptionSchoolsResponse, error)) *SubscriptionService_ListSubscriptionSchools_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
